// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	interaction "github.com/gitgou/simple_douyin/cmd/interaction-v3/kitex_gen/interaction"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FavoriteAction(ctx context.Context, Req *interaction.DouyinFavoriteActionRequest, callOptions ...callopt.Option) (r *interaction.DouyinFavoriteActionResponse, err error)
	ShowFavoriteList(ctx context.Context, Req *interaction.DouyinFavoriteListRequest, callOptions ...callopt.Option) (r *interaction.DouyinFavoriteListResponse, err error)
	CommentAction(ctx context.Context, Req *interaction.DouyinCommentActionRequest, callOptions ...callopt.Option) (r *interaction.DouyinCommentActionResponse, err error)
	ShowCommentList(ctx context.Context, Req *interaction.DouyinCommentListRequest, callOptions ...callopt.Option) (r *interaction.DouyinCommentListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionserviceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionserviceClient struct {
	*kClient
}

func (p *kInteractionserviceClient) FavoriteAction(ctx context.Context, Req *interaction.DouyinFavoriteActionRequest, callOptions ...callopt.Option) (r *interaction.DouyinFavoriteActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, Req)
}

func (p *kInteractionserviceClient) ShowFavoriteList(ctx context.Context, Req *interaction.DouyinFavoriteListRequest, callOptions ...callopt.Option) (r *interaction.DouyinFavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowFavoriteList(ctx, Req)
}

func (p *kInteractionserviceClient) CommentAction(ctx context.Context, Req *interaction.DouyinCommentActionRequest, callOptions ...callopt.Option) (r *interaction.DouyinCommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, Req)
}

func (p *kInteractionserviceClient) ShowCommentList(ctx context.Context, Req *interaction.DouyinCommentListRequest, callOptions ...callopt.Option) (r *interaction.DouyinCommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowCommentList(ctx, Req)
}
