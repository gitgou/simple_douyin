// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactionservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	interaction "github.com/gitgou/simple_douyin/cmd/interaction-v3/kitex_gen/interaction"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionserviceServiceInfo
}

var interactionserviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "interactionservice"
	handlerType := (*interaction.Interactionservice)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":   kitex.NewMethodInfo(favoriteActionHandler, newFavoriteActionArgs, newFavoriteActionResult, false),
		"ShowFavoriteList": kitex.NewMethodInfo(showFavoriteListHandler, newShowFavoriteListArgs, newShowFavoriteListResult, false),
		"CommentAction":    kitex.NewMethodInfo(commentActionHandler, newCommentActionArgs, newCommentActionResult, false),
		"ShowCommentList":  kitex.NewMethodInfo(showCommentListHandler, newShowCommentListArgs, newShowCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.DouyinFavoriteActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.Interactionservice).FavoriteAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteActionArgs:
		success, err := handler.(interaction.Interactionservice).FavoriteAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteActionResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteActionArgs() interface{} {
	return &FavoriteActionArgs{}
}

func newFavoriteActionResult() interface{} {
	return &FavoriteActionResult{}
}

type FavoriteActionArgs struct {
	Req *interaction.DouyinFavoriteActionRequest
}

func (p *FavoriteActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteActionArgs) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinFavoriteActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteActionArgs_Req_DEFAULT *interaction.DouyinFavoriteActionRequest

func (p *FavoriteActionArgs) GetReq() *interaction.DouyinFavoriteActionRequest {
	if !p.IsSetReq() {
		return FavoriteActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteActionResult struct {
	Success *interaction.DouyinFavoriteActionResponse
}

var FavoriteActionResult_Success_DEFAULT *interaction.DouyinFavoriteActionResponse

func (p *FavoriteActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteActionResult) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinFavoriteActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteActionResult) GetSuccess() *interaction.DouyinFavoriteActionResponse {
	if !p.IsSetSuccess() {
		return FavoriteActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.DouyinFavoriteActionResponse)
}

func (p *FavoriteActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func showFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.DouyinFavoriteListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.Interactionservice).ShowFavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ShowFavoriteListArgs:
		success, err := handler.(interaction.Interactionservice).ShowFavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ShowFavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newShowFavoriteListArgs() interface{} {
	return &ShowFavoriteListArgs{}
}

func newShowFavoriteListResult() interface{} {
	return &ShowFavoriteListResult{}
}

type ShowFavoriteListArgs struct {
	Req *interaction.DouyinFavoriteListRequest
}

func (p *ShowFavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ShowFavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ShowFavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinFavoriteListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ShowFavoriteListArgs_Req_DEFAULT *interaction.DouyinFavoriteListRequest

func (p *ShowFavoriteListArgs) GetReq() *interaction.DouyinFavoriteListRequest {
	if !p.IsSetReq() {
		return ShowFavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ShowFavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type ShowFavoriteListResult struct {
	Success *interaction.DouyinFavoriteListResponse
}

var ShowFavoriteListResult_Success_DEFAULT *interaction.DouyinFavoriteListResponse

func (p *ShowFavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ShowFavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ShowFavoriteListResult) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinFavoriteListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ShowFavoriteListResult) GetSuccess() *interaction.DouyinFavoriteListResponse {
	if !p.IsSetSuccess() {
		return ShowFavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ShowFavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.DouyinFavoriteListResponse)
}

func (p *ShowFavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.DouyinCommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.Interactionservice).CommentAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentActionArgs:
		success, err := handler.(interaction.Interactionservice).CommentAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentActionResult)
		realResult.Success = success
	}
	return nil
}
func newCommentActionArgs() interface{} {
	return &CommentActionArgs{}
}

func newCommentActionResult() interface{} {
	return &CommentActionResult{}
}

type CommentActionArgs struct {
	Req *interaction.DouyinCommentActionRequest
}

func (p *CommentActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentActionArgs) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinCommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentActionArgs_Req_DEFAULT *interaction.DouyinCommentActionRequest

func (p *CommentActionArgs) GetReq() *interaction.DouyinCommentActionRequest {
	if !p.IsSetReq() {
		return CommentActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentActionResult struct {
	Success *interaction.DouyinCommentActionResponse
}

var CommentActionResult_Success_DEFAULT *interaction.DouyinCommentActionResponse

func (p *CommentActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentActionResult) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinCommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentActionResult) GetSuccess() *interaction.DouyinCommentActionResponse {
	if !p.IsSetSuccess() {
		return CommentActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.DouyinCommentActionResponse)
}

func (p *CommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func showCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.DouyinCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.Interactionservice).ShowCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ShowCommentListArgs:
		success, err := handler.(interaction.Interactionservice).ShowCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ShowCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newShowCommentListArgs() interface{} {
	return &ShowCommentListArgs{}
}

func newShowCommentListResult() interface{} {
	return &ShowCommentListResult{}
}

type ShowCommentListArgs struct {
	Req *interaction.DouyinCommentListRequest
}

func (p *ShowCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ShowCommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ShowCommentListArgs) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ShowCommentListArgs_Req_DEFAULT *interaction.DouyinCommentListRequest

func (p *ShowCommentListArgs) GetReq() *interaction.DouyinCommentListRequest {
	if !p.IsSetReq() {
		return ShowCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ShowCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type ShowCommentListResult struct {
	Success *interaction.DouyinCommentListResponse
}

var ShowCommentListResult_Success_DEFAULT *interaction.DouyinCommentListResponse

func (p *ShowCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ShowCommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ShowCommentListResult) Unmarshal(in []byte) error {
	msg := new(interaction.DouyinCommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ShowCommentListResult) GetSuccess() *interaction.DouyinCommentListResponse {
	if !p.IsSetSuccess() {
		return ShowCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ShowCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.DouyinCommentListResponse)
}

func (p *ShowCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, Req *interaction.DouyinFavoriteActionRequest) (r *interaction.DouyinFavoriteActionResponse, err error) {
	var _args FavoriteActionArgs
	_args.Req = Req
	var _result FavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowFavoriteList(ctx context.Context, Req *interaction.DouyinFavoriteListRequest) (r *interaction.DouyinFavoriteListResponse, err error) {
	var _args ShowFavoriteListArgs
	_args.Req = Req
	var _result ShowFavoriteListResult
	if err = p.c.Call(ctx, "ShowFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, Req *interaction.DouyinCommentActionRequest) (r *interaction.DouyinCommentActionResponse, err error) {
	var _args CommentActionArgs
	_args.Req = Req
	var _result CommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCommentList(ctx context.Context, Req *interaction.DouyinCommentListRequest) (r *interaction.DouyinCommentListResponse, err error) {
	var _args ShowCommentListArgs
	_args.Req = Req
	var _result ShowCommentListResult
	if err = p.c.Call(ctx, "ShowCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
