// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	relationdemo "github.com/gitgou/simple_douyin/kitex_gen/relationdemo"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relationdemo.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Relation":            kitex.NewMethodInfo(relationHandler, newRelationArgs, newRelationResult, false),
		"GetFollow":           kitex.NewMethodInfo(getFollowHandler, newGetFollowArgs, newGetFollowResult, false),
		"GetFollower":         kitex.NewMethodInfo(getFollowerHandler, newGetFollowerArgs, newGetFollowerResult, false),
		"GetFriend":           kitex.NewMethodInfo(getFriendHandler, newGetFriendArgs, newGetFriendResult, false),
		"CheckFollowRelation": kitex.NewMethodInfo(checkFollowRelationHandler, newCheckFollowRelationArgs, newCheckFollowRelationResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.RelationRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).Relation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationArgs:
		success, err := handler.(relationdemo.RelationService).Relation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationResult)
		realResult.Success = success
	}
	return nil
}
func newRelationArgs() interface{} {
	return &RelationArgs{}
}

func newRelationResult() interface{} {
	return &RelationResult{}
}

type RelationArgs struct {
	Req *relationdemo.RelationRequest
}

func (p *RelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RelationArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationArgs_Req_DEFAULT *relationdemo.RelationRequest

func (p *RelationArgs) GetReq() *relationdemo.RelationRequest {
	if !p.IsSetReq() {
		return RelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationArgs) IsSetReq() bool {
	return p.Req != nil
}

type RelationResult struct {
	Success *relationdemo.RelationResponse
}

var RelationResult_Success_DEFAULT *relationdemo.RelationResponse

func (p *RelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RelationResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationResult) GetSuccess() *relationdemo.RelationResponse {
	if !p.IsSetSuccess() {
		return RelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.RelationResponse)
}

func (p *RelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.GetFollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowArgs:
		success, err := handler.(relationdemo.RelationService).GetFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowArgs() interface{} {
	return &GetFollowArgs{}
}

func newGetFollowResult() interface{} {
	return &GetFollowResult{}
}

type GetFollowArgs struct {
	Req *relationdemo.GetFollowRequest
}

func (p *GetFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowArgs_Req_DEFAULT *relationdemo.GetFollowRequest

func (p *GetFollowArgs) GetReq() *relationdemo.GetFollowRequest {
	if !p.IsSetReq() {
		return GetFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowResult struct {
	Success *relationdemo.GetFollowResponse
}

var GetFollowResult_Success_DEFAULT *relationdemo.GetFollowResponse

func (p *GetFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFollowResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowResult) GetSuccess() *relationdemo.GetFollowResponse {
	if !p.IsSetSuccess() {
		return GetFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.GetFollowResponse)
}

func (p *GetFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.GetFollowerRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFollower(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerArgs:
		success, err := handler.(relationdemo.RelationService).GetFollower(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerArgs() interface{} {
	return &GetFollowerArgs{}
}

func newGetFollowerResult() interface{} {
	return &GetFollowerResult{}
}

type GetFollowerArgs struct {
	Req *relationdemo.GetFollowerRequest
}

func (p *GetFollowerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFollowerRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerArgs_Req_DEFAULT *relationdemo.GetFollowerRequest

func (p *GetFollowerArgs) GetReq() *relationdemo.GetFollowerRequest {
	if !p.IsSetReq() {
		return GetFollowerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerResult struct {
	Success *relationdemo.GetFollowerResponse
}

var GetFollowerResult_Success_DEFAULT *relationdemo.GetFollowerResponse

func (p *GetFollowerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFollowerResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerResult) GetSuccess() *relationdemo.GetFollowerResponse {
	if !p.IsSetSuccess() {
		return GetFollowerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.GetFollowerResponse)
}

func (p *GetFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.GetFriendRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFriend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendArgs:
		success, err := handler.(relationdemo.RelationService).GetFriend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendArgs() interface{} {
	return &GetFriendArgs{}
}

func newGetFriendResult() interface{} {
	return &GetFriendResult{}
}

type GetFriendArgs struct {
	Req *relationdemo.GetFriendRequest
}

func (p *GetFriendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFriendRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendArgs_Req_DEFAULT *relationdemo.GetFriendRequest

func (p *GetFriendArgs) GetReq() *relationdemo.GetFriendRequest {
	if !p.IsSetReq() {
		return GetFriendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFriendResult struct {
	Success *relationdemo.GetFriendResponse
}

var GetFriendResult_Success_DEFAULT *relationdemo.GetFriendResponse

func (p *GetFriendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.GetFriendResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendResult) GetSuccess() *relationdemo.GetFriendResponse {
	if !p.IsSetSuccess() {
		return GetFriendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.GetFriendResponse)
}

func (p *GetFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkFollowRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.CheckFollowRelationRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).CheckFollowRelation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckFollowRelationArgs:
		success, err := handler.(relationdemo.RelationService).CheckFollowRelation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckFollowRelationResult)
		realResult.Success = success
	}
	return nil
}
func newCheckFollowRelationArgs() interface{} {
	return &CheckFollowRelationArgs{}
}

func newCheckFollowRelationResult() interface{} {
	return &CheckFollowRelationResult{}
}

type CheckFollowRelationArgs struct {
	Req *relationdemo.CheckFollowRelationRequest
}

func (p *CheckFollowRelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckFollowRelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckFollowRelationArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.CheckFollowRelationRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckFollowRelationArgs_Req_DEFAULT *relationdemo.CheckFollowRelationRequest

func (p *CheckFollowRelationArgs) GetReq() *relationdemo.CheckFollowRelationRequest {
	if !p.IsSetReq() {
		return CheckFollowRelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckFollowRelationArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckFollowRelationResult struct {
	Success *relationdemo.CheckFollowRelationResponse
}

var CheckFollowRelationResult_Success_DEFAULT *relationdemo.CheckFollowRelationResponse

func (p *CheckFollowRelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckFollowRelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckFollowRelationResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.CheckFollowRelationResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckFollowRelationResult) GetSuccess() *relationdemo.CheckFollowRelationResponse {
	if !p.IsSetSuccess() {
		return CheckFollowRelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckFollowRelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.CheckFollowRelationResponse)
}

func (p *CheckFollowRelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Relation(ctx context.Context, Req *relationdemo.RelationRequest) (r *relationdemo.RelationResponse, err error) {
	var _args RelationArgs
	_args.Req = Req
	var _result RelationResult
	if err = p.c.Call(ctx, "Relation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollow(ctx context.Context, Req *relationdemo.GetFollowRequest) (r *relationdemo.GetFollowResponse, err error) {
	var _args GetFollowArgs
	_args.Req = Req
	var _result GetFollowResult
	if err = p.c.Call(ctx, "GetFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollower(ctx context.Context, Req *relationdemo.GetFollowerRequest) (r *relationdemo.GetFollowerResponse, err error) {
	var _args GetFollowerArgs
	_args.Req = Req
	var _result GetFollowerResult
	if err = p.c.Call(ctx, "GetFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriend(ctx context.Context, Req *relationdemo.GetFriendRequest) (r *relationdemo.GetFriendResponse, err error) {
	var _args GetFriendArgs
	_args.Req = Req
	var _result GetFriendResult
	if err = p.c.Call(ctx, "GetFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckFollowRelation(ctx context.Context, Req *relationdemo.CheckFollowRelationRequest) (r *relationdemo.CheckFollowRelationResponse, err error) {
	var _args CheckFollowRelationArgs
	_args.Req = Req
	var _result CheckFollowRelationResult
	if err = p.c.Call(ctx, "CheckFollowRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
