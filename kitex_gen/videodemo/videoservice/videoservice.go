// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	videodemo "github.com/gitgou/simple_douyin/kitex_gen/videodemo"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videodemo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":         kitex.NewMethodInfo(feedHandler, newFeedArgs, newFeedResult, false),
		"Publish":      kitex.NewMethodInfo(publishHandler, newPublishArgs, newPublishResult, false),
		"PublishList":  kitex.NewMethodInfo(publishListHandler, newPublishListArgs, newPublishListResult, false),
		"GetVideoList": kitex.NewMethodInfo(getVideoListHandler, newGetVideoListArgs, newGetVideoListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).Feed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FeedArgs:
		success, err := handler.(videodemo.VideoService).Feed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FeedResult)
		realResult.Success = success
	}
	return nil
}
func newFeedArgs() interface{} {
	return &FeedArgs{}
}

func newFeedResult() interface{} {
	return &FeedResult{}
}

type FeedArgs struct {
	Req *videodemo.FeedRequest
}

func (p *FeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FeedArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FeedArgs_Req_DEFAULT *videodemo.FeedRequest

func (p *FeedArgs) GetReq() *videodemo.FeedRequest {
	if !p.IsSetReq() {
		return FeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type FeedResult struct {
	Success *videodemo.FeedResponse
}

var FeedResult_Success_DEFAULT *videodemo.FeedResponse

func (p *FeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FeedResult) Unmarshal(in []byte) error {
	msg := new(videodemo.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FeedResult) GetSuccess() *videodemo.FeedResponse {
	if !p.IsSetSuccess() {
		return FeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.FeedResponse)
}

func (p *FeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.PublishRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).Publish(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishArgs:
		success, err := handler.(videodemo.VideoService).Publish(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishResult)
		realResult.Success = success
	}
	return nil
}
func newPublishArgs() interface{} {
	return &PublishArgs{}
}

func newPublishResult() interface{} {
	return &PublishResult{}
}

type PublishArgs struct {
	Req *videodemo.PublishRequest
}

func (p *PublishArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.PublishRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishArgs_Req_DEFAULT *videodemo.PublishRequest

func (p *PublishArgs) GetReq() *videodemo.PublishRequest {
	if !p.IsSetReq() {
		return PublishArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishResult struct {
	Success *videodemo.PublishResponse
}

var PublishResult_Success_DEFAULT *videodemo.PublishResponse

func (p *PublishResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishResult) Unmarshal(in []byte) error {
	msg := new(videodemo.PublishResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishResult) GetSuccess() *videodemo.PublishResponse {
	if !p.IsSetSuccess() {
		return PublishResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.PublishResponse)
}

func (p *PublishResult) IsSetSuccess() bool {
	return p.Success != nil
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.PublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).PublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishListArgs:
		success, err := handler.(videodemo.VideoService).PublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishListResult)
		realResult.Success = success
	}
	return nil
}
func newPublishListArgs() interface{} {
	return &PublishListArgs{}
}

func newPublishListResult() interface{} {
	return &PublishListResult{}
}

type PublishListArgs struct {
	Req *videodemo.PublishListRequest
}

func (p *PublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishListArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.PublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishListArgs_Req_DEFAULT *videodemo.PublishListRequest

func (p *PublishListArgs) GetReq() *videodemo.PublishListRequest {
	if !p.IsSetReq() {
		return PublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishListResult struct {
	Success *videodemo.PublishListResponse
}

var PublishListResult_Success_DEFAULT *videodemo.PublishListResponse

func (p *PublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishListResult) Unmarshal(in []byte) error {
	msg := new(videodemo.PublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishListResult) GetSuccess() *videodemo.PublishListResponse {
	if !p.IsSetSuccess() {
		return PublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.PublishListResponse)
}

func (p *PublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.GetVideoListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).GetVideoList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoListArgs:
		success, err := handler.(videodemo.VideoService).GetVideoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoListResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoListArgs() interface{} {
	return &GetVideoListArgs{}
}

func newGetVideoListResult() interface{} {
	return &GetVideoListResult{}
}

type GetVideoListArgs struct {
	Req *videodemo.GetVideoListRequest
}

func (p *GetVideoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoListArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.GetVideoListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoListArgs_Req_DEFAULT *videodemo.GetVideoListRequest

func (p *GetVideoListArgs) GetReq() *videodemo.GetVideoListRequest {
	if !p.IsSetReq() {
		return GetVideoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoListResult struct {
	Success *videodemo.GetVideoListResponse
}

var GetVideoListResult_Success_DEFAULT *videodemo.GetVideoListResponse

func (p *GetVideoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoListResult) Unmarshal(in []byte) error {
	msg := new(videodemo.GetVideoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoListResult) GetSuccess() *videodemo.GetVideoListResponse {
	if !p.IsSetSuccess() {
		return GetVideoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.GetVideoListResponse)
}

func (p *GetVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, Req *videodemo.FeedRequest) (r *videodemo.FeedResponse, err error) {
	var _args FeedArgs
	_args.Req = Req
	var _result FeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Publish(ctx context.Context, Req *videodemo.PublishRequest) (r *videodemo.PublishResponse, err error) {
	var _args PublishArgs
	_args.Req = Req
	var _result PublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, Req *videodemo.PublishListRequest) (r *videodemo.PublishListResponse, err error) {
	var _args PublishListArgs
	_args.Req = Req
	var _result PublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, Req *videodemo.GetVideoListRequest) (r *videodemo.GetVideoListResponse, err error) {
	var _args GetVideoListArgs
	_args.Req = Req
	var _result GetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
